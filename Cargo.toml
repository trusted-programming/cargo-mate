[package]
name = "mate"
version = "0.1.0"
authors = ["Cameron Low <cameron.low.2018@bristol.ac.uk>", "Luca Carlig <luca.carlig@huawei.com"]
description = "library of lints for automatic parallelization"
edition = "2021"
publish = false

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
crate-type = ["cdylib"]

[dependencies]
for_each = { path = "lints/for_each", features = ["rlib"] }
filter = { path = "lints/filter", features = ["rlib"] }
map = { path = "lints/map", features = ["rlib"] }
fold = { path = "lints/fold", features = ["rlib"] }
par_fold = { path = "lints/par_fold", features = ["rlib"] }
par_iter = { path = "lints/par_iter", features = ["rlib"] }
rayon_imports = { path = "lints/rayon_imports", features = ["rlib"] }

dylint_linting = { version = "2.6.1" }

[package.metadata.rust-analyzer]
rustc_private = true

[workspace]
members = [
    "lints/for_each",
    "lints/filter",
    "lints/map",
    "lints/fold",
    "lints/par_fold",
    "lints/par_iter",
    "lints/rayon_imports",
    "utils",
]

[dev-dependencies]
dylint_testing = "3.0.0"

[workspace.dependencies]
clippy_utils = { git = "https://github.com/rust-lang/rust-clippy", rev = "aa2c94e416d346341fe3a875160a7d064596f4d3" }
utils = { path = "utils" }

[workspace.metadata.dylint]
clibraries = [{ path = "../mate" }]

[lints.clippy]
# GROUPS
perf = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -2 }
correctness = { level = "forbid", priority = -3 }
complexity = { level = "forbid", priority = -4 }


# INDIVIDUAL LINTS
semicolon_if_nothing_returned = { level = "allow", priority = 0 }
similar_names = { level = "allow", priority = 0 }
alloc_instead_of_core = { level = "warn", priority = 0 }
as_conversions = { level = "warn", priority = 0 }
as_underscore = { level = "warn", priority = 0 }
dbg_macro = { level = "warn", priority = 0 }
default_numeric_fallback = { level = "warn", priority = 0 }
deref_by_slicing = { level = "warn", priority = 0 }
empty_enum_variants_with_brackets = { level = "warn", priority = 0 }
empty_structs_with_brackets = { level = "warn", priority = 0 }
expect_used = { level = "warn", priority = 0 }
format_push_string = { level = "warn", priority = 0 }
if_then_some_else_none = { level = "warn", priority = 0 }
unwrap_used = { level = "warn", priority = 0 }
